name: Terraform

on:
  workflow_call:
    inputs:
      exec:
        required: true
        type: string
    outputs:
      ip_addr:
        description: "IP addr of kitty-vm"
        value: ${{ jobs.terraform.outputs.ip }}
    secrets:
      TF_VAR_YANDEX_TOKEN:
        required: true
      TF_VAR_YANDEX_CLOUD_ID:
        required: true
      TF_VAR_YANDEX_FOLDER_ID:
        required: true
      TF_VAR_YANDEX_ZONE:
        required: true
      TF_VAR_SSH_KEY:
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ip: ${{ steps.apply.outputs.ip }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: v1.11.2
      - name: Check out code
        uses: actions/checkout@v3
      - name: Terraform init
        working-directory: ./infra
        run: |
          TF_CLI_CONFIG_FILE=./.terraformrc terraform init --upgrade
      - name: Terraform Plan
        working-directory: ./infra
        if: ${{ inputs.exec == 'plan' }}
        run: terraform plan
        env:
          TF_VAR_YANDEX_TOKEN: ${{ secrets.TF_VAR_YANDEX_TOKEN }}
          TF_VAR_YANDEX_CLOUD_ID: ${{ secrets.TF_VAR_YANDEX_CLOUD_ID }}
          TF_VAR_YANDEX_FOLDER_ID: ${{ secrets.TF_VAR_YANDEX_FOLDER_ID }}
          TF_VAR_YANDEX_ZONE: ${{ secrets.TF_VAR_YANDEX_ZONE }}
          TF_VAR_SSH_KEY: ${{ secrets.TF_VAR_SSH_KEY }}
      - name: Terraform apply
        id: apply
        working-directory: ./infra
        if: ${{ inputs.exec == 'apply' }}
        run: |
          terraform apply -auto-approve
          echo "instance_ip_addr=`terraform output -raw instance_ip_addr` >> $GITHUB_OUTPUT"
        env:
          TF_VAR_YANDEX_TOKEN: ${{ secrets.TF_VAR_YANDEX_TOKEN }}
          TF_VAR_YANDEX_CLOUD_ID: ${{ secrets.TF_VAR_YANDEX_CLOUD_ID }}
          TF_VAR_YANDEX_FOLDER_ID: ${{ secrets.TF_VAR_YANDEX_FOLDER_ID }}
          TF_VAR_YANDEX_ZONE: ${{ secrets.TF_VAR_YANDEX_ZONE }}
          TF_VAR_SSH_KEY: ${{ secrets.TF_VAR_SSH_KEY }}
      - name: Terraform destroy
        working-directory: ./infra
        if: ${{ inputs.exec == 'destroy' }}
        run: terraform destroy -auto-approve
        env:
          TF_VAR_YANDEX_TOKEN: ${{ secrets.TF_VAR_YANDEX_TOKEN }}
          TF_VAR_YANDEX_CLOUD_ID: ${{ secrets.TF_VAR_YANDEX_CLOUD_ID }}
          TF_VAR_YANDEX_FOLDER_ID: ${{ secrets.TF_VAR_YANDEX_FOLDER_ID }}
          TF_VAR_YANDEX_ZONE: ${{ secrets.TF_VAR_YANDEX_ZONE }}
          TF_VAR_SSH_KEY: ${{ secrets.TF_VAR_SSH_KEY }}